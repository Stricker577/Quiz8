const express = require('express');
const app = express();
const port = 3000;

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const options = {
    swaggerDefinition: {
        info: {
            title: 'Personal Budget API',
            version: '1.0.0',
            description: 'Personal Budget API autogenerated by me',    
        },
        host: 'localhost:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
};

const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

const prices = {
    food: [
        {
            name: 'apple',
            price: 1,
        },
        {
            name: 'orange',
            price: 2,
        },
        {
            name: 'banana',
            price: 3,
        },
    ]
}

/**
 * @swagger
 * /prices:
 *    get:
 *      description: Return all prices 
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object food containing array of food obj with prices
 *          404:
 *              description: Error
 */
app.get('/prices', (req, res) => {
    res.json(prices);
});

/**
 * @swagger
 * /prices/{foodName}:
 *    post:
 *      description: Adds a new food
 *      parameters:
 *          - name: foodName
 *            in: path
 *            description: Name of food you want to add
 *            schema:
 *              type: string
 *          - name: foodPrice
 *            in: query
 *            description: price of the food
 *            schema:
 *              type: integer
 *              format: int64
 *      responses:
 *          200:
 *              description: Food Name updated
 *          404:
 *              description: Error
 */
app.post('/prices/:foodName', (req, res) => {
    const { foodName } = req.params;
    const { foodPrice } = req.query;
    const foodItem = { name: foodName, price: foodPrice };
    prices.food.push(foodItem);
    res.json(prices);
    
});

/**
 * @swagger
 * /prices/{foodName}:
 *    patch:
 *      description: updates the name of an item
 *      parameters:
 *          - name: foodName
 *            in: path
 *            description: food you want to update
 *            schema:
 *              type: string
 *          - name: newName
 *            in: query
 *            description: new name of the food
 *            schema:
 *              type: integer
 *              format: int64
 *      responses:
 *          200:
 *              description: Food Name updated
 *          404:
 *              description: Error
 */
app.patch('/prices/:foodName', (req, res) => {
    const { foodName } = req.params;
    const { newName } = req.query;
    const foodItem = prices.food.find((findName) => findName.name === foodName);
    if (foodItem){
        foodItem.name = newName;
        res.json(prices);
    } else {
        res.status(404).json('Food item could not be found')
    }
});

/**
 * @swagger
 * /prices/{foodName}:
 *    put:
 *      description: updates the price of an item
 *      parameters:
 *          - name: foodName
 *            in: path
 *            description: food you want to update
 *            schema:
 *              type: string
 *          - name: newPrice
 *            in: query
 *            description: new price of the food
 *            schema:
 *              type: integer
 *              format: int64
 *      responses:
 *          200:
 *              description: Food Price updated
 *          404:
 *              description: Error
 */
app.put('/prices/:foodName', (req, res) => {
    const { foodName } = req.params;
    const { newPrice } = req.query;
    const foodItem = prices.food.find(findName => findName.name === foodName);
    if (foodItem){
        foodItem.price = Number(newPrice);
        res.json(prices);
    } else {
        res.status(404).json('Food item could not be found')
    }
});

/**
 * @swagger
 * /prices/{foodName}:
 *    delete:
 *      description: deletes an item
 *      parameters:
 *          - name: foodName
 *            in: path
 *            description: Name of food that needs to be deleted
 *            schema:
 *              type: string
 *      responses:
 *          200:
 *              description: Food Name deleted
 *          404:
 *              description: Error
 */
app.delete('/prices/:foodName', (req, res) => {
    const { foodName } = req.params;
    const foodItem = prices.food.findIndex(findName => findName.name === foodName);
    if (foodItem >= 0){
        prices.food.splice(foodItem, 1);
        res.json(prices);
    } else {
        res.status(404).json('Food item could not be found')
    }
});
  

app.listen(port, () => {
    console.log(`API served at http://localhost:${port}/docs`);
})